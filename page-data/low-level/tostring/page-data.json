{"componentChunkName":"component---src-templates-lesson-template-js","path":"/low-level/tostring","result":{"data":{"markdownRemark":{"html":"<p>All of this value conversion is a lot of mental overhead. Fortunately we can utilize JavaScript to make our lives easier.</p>\n<h4 id=\"objectprototypetostringradix\" style=\"position:relative;\"><a href=\"#objectprototypetostringradix\" aria-label=\"objectprototypetostringradix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Object.prototype.toString(radix)</code></h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">toString()</a> returns a string representation of an object. It takes an optional <code class=\"language-text\">radix</code> parameter.</p>\n<blockquote>\n<p><em>radix</em> is the number of unique digits. It is also known as <em>base</em></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Radix/Base</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>binary</td>\n</tr>\n<tr>\n<td>10</td>\n<td>decimal</td>\n</tr>\n<tr>\n<td>16</td>\n<td>hexadecimal</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"exercise\" style=\"position:relative;\"><a href=\"#exercise\" aria-label=\"exercise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise</h4>\n<details>\n  <summary>Write a function that converts from hexadecimal to decimal</summary>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hexToDecimal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<details>\n  <summary>Write a function that converts from decimal to binary</summary>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">decimalToBinary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>","frontmatter":{"path":"/low-level/tostring","title":"The underrated .toString() method","order":"1E","section":"Low Level Stuff","description":""}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"5A","path":"/closing","title":"In closing"}}},{"node":{"frontmatter":{"order":"0B","path":"/intro-to-wasm","title":"Introduction to Web Assembly"}}},{"node":{"frontmatter":{"order":"0A","path":"/intro","title":"Hello"}}},{"node":{"frontmatter":{"order":"3A","path":"/assembly-script","title":"What is AssemblyScript"}}},{"node":{"frontmatter":{"order":"3G","path":"/assembly-script/imports","title":"Imports"}}},{"node":{"frontmatter":{"order":"3K","path":"/assembly-script/jsvwasm","title":"JS vs Wasm"}}},{"node":{"frontmatter":{"order":"3H","path":"/assembly-script/loader","title":"AssemblyScript Loader"}}},{"node":{"frontmatter":{"order":"3F","path":"/assembly-script/loading-browser","title":"Loading AssemblyScript - Browser"}}},{"node":{"frontmatter":{"order":"3E","path":"/assembly-script/loading-node","title":"Loading AssemblyScript - NodeJS"}}},{"node":{"frontmatter":{"order":"3J","path":"/assembly-script/memory","title":"Memory"}}},{"node":{"frontmatter":{"order":"3C","path":"/assembly-script/setup","title":"AssemblyScript Setup"}}},{"node":{"frontmatter":{"order":"3I","path":"/assembly-script/loader-usage","title":"Using the AssemblyScript loader"}}},{"node":{"frontmatter":{"order":"1C","path":"/low-level/binary-contd","title":"Binary continued"}}},{"node":{"frontmatter":{"order":"3D","path":"/assembly-script/writing","title":"Writing AssemblyScript"}}},{"node":{"frontmatter":{"order":"1B","path":"/low-level/binary","title":"Binary"}}},{"node":{"frontmatter":{"order":"1D","path":"/low-level/hex","title":"Hexadecimal"}}},{"node":{"frontmatter":{"order":"1G","path":"/low-level/memory","title":"Memory"}}},{"node":{"frontmatter":{"order":"1E","path":"/low-level/tostring","title":"The underrated .toString() method"}}},{"node":{"frontmatter":{"order":"1G","path":"/low-level/types","title":"Numeric types"}}},{"node":{"frontmatter":{"order":"2C","path":"/wasm/stack","title":"Stack and OpCode"}}},{"node":{"frontmatter":{"order":"2B","path":"/wasm/intro-contd","title":"Modules"}}},{"node":{"frontmatter":{"order":"2A","path":"/wasm/intro","title":"What is Web Assembly?"}}},{"node":{"frontmatter":{"order":"2D","path":"/wasm/writing","title":"Writing Web Assembly"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}