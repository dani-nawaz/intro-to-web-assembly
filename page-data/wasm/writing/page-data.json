{"componentChunkName":"component---src-templates-lesson-template-js","path":"/wasm/writing","result":{"data":{"markdownRemark":{"html":"<p>Let's write something a bit more complicated. Create an equivalent function in Web Assembly:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The equivalent Web Assembly function is a bit more...verbose</p>\n<div class=\"gatsby-highlight\" data-language=\"wasm\"><pre class=\"language-wasm\"><code class=\"language-wasm\"> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$example</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$0</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">get_local</span> <span class=\"token variable\">$0</span>\n  <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>eq</span>\n  <span class=\"token keyword\">if</span>\n   <span class=\"token keyword\">get_local</span> <span class=\"token variable\">$0</span>\n   <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">2</span>\n   <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>mul</span>\n   <span class=\"token keyword\">return</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">get_local</span> <span class=\"token variable\">$0</span>\n  <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">3</span>\n  <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>eq</span>\n  <span class=\"token keyword\">if</span>\n   <span class=\"token keyword\">get_local</span> <span class=\"token variable\">$0</span>\n   <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">3</span>\n   <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>mul</span>\n   <span class=\"token keyword\">return</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">get_local</span> <span class=\"token variable\">$0</span>\n  <span class=\"token keyword\">get_local</span> <span class=\"token variable\">$0</span>\n  <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>mul</span>\n <span class=\"token punctuation\">)</span></code></pre></div>\n<p>As we can see writing Web Assembly by hand isn't terribly practical. Fortunately we have AssemblyScript.</p>","frontmatter":{"path":"/wasm/writing","title":"Writing Web Assembly","order":"2D","section":"Web Assembly","description":""}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"5A","path":"/closing","title":"In closing"}}},{"node":{"frontmatter":{"order":"0A","path":"/intro","title":"Hello"}}},{"node":{"frontmatter":{"order":"3A","path":"/assembly-script","title":"What is AssemblyScript"}}},{"node":{"frontmatter":{"order":"0B","path":"/intro-to-wasm","title":"Introduction to Web Assembly"}}},{"node":{"frontmatter":{"order":"3G","path":"/assembly-script/imports","title":"Imports"}}},{"node":{"frontmatter":{"order":"3K","path":"/assembly-script/jsvwasm","title":"JS vs Wasm"}}},{"node":{"frontmatter":{"order":"3H","path":"/assembly-script/loader","title":"AssemblyScript Loader"}}},{"node":{"frontmatter":{"order":"3F","path":"/assembly-script/loading-browser","title":"Loading AssemblyScript - Browser"}}},{"node":{"frontmatter":{"order":"3E","path":"/assembly-script/loading-node","title":"Loading AssemblyScript - NodeJS"}}},{"node":{"frontmatter":{"order":"3J","path":"/assembly-script/memory","title":"Memory"}}},{"node":{"frontmatter":{"order":"3C","path":"/assembly-script/setup","title":"AssemblyScript Setup"}}},{"node":{"frontmatter":{"order":"3I","path":"/assembly-script/loader-usage","title":"Using the AssemblyScript loader"}}},{"node":{"frontmatter":{"order":"3D","path":"/assembly-script/writing","title":"Writing AssemblyScript"}}},{"node":{"frontmatter":{"order":"1C","path":"/low-level/binary-contd","title":"Binary continued"}}},{"node":{"frontmatter":{"order":"1B","path":"/low-level/binary","title":"Binary"}}},{"node":{"frontmatter":{"order":"1D","path":"/low-level/hex","title":"Hexadecimal"}}},{"node":{"frontmatter":{"order":"1G","path":"/low-level/memory","title":"Memory"}}},{"node":{"frontmatter":{"order":"1E","path":"/low-level/tostring","title":"The underrated .toString() method"}}},{"node":{"frontmatter":{"order":"1G","path":"/low-level/types","title":"Numeric types"}}},{"node":{"frontmatter":{"order":"2C","path":"/wasm/stack","title":"Stack and OpCode"}}},{"node":{"frontmatter":{"order":"2B","path":"/wasm/intro-contd","title":"Modules"}}},{"node":{"frontmatter":{"order":"2A","path":"/wasm/intro","title":"What is Web Assembly?"}}},{"node":{"frontmatter":{"order":"2D","path":"/wasm/writing","title":"Writing Web Assembly"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}