{"componentChunkName":"component---src-templates-lesson-template-js","path":"/assembly-script/loader","result":{"data":{"markdownRemark":{"html":"<h6 id=\"working-repo\" style=\"position:relative;\"><a href=\"#working-repo\" aria-label=\"working repo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/young/intro-to-web-assembly/tree/main/lessons/assembly-script/exercises/5/iwasm\">Working repo</a></h6>\n<h4 id=\"exercise\" style=\"position:relative;\"><a href=\"#exercise\" aria-label=\"exercise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise</h4>\n<p>Implement fizzbuzz in AssemblyScript.</p>\n<p>Hint:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  if (number is divisible by 15) then\n\t&quot;fizzbuzz&quot;\n  if (number is divisible by 3) then\n\t&quot;fizz&quot;\n  if (number is divisible by 5) then\n\t&quot;buzz&quot;</code></pre></div>\n<details>\n  <summary>Solution</summary>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// assembly/index.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fizzbuzz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token operator\">:</span> i32</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">15</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'fizzbuzz'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'fizz'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'buzz'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<h4 id=\"strings\" style=\"position:relative;\"><a href=\"#strings\" aria-label=\"strings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strings</h4>\n<p>Update <code class=\"language-text\">index.html</code> to call <code class=\"language-text\">fizzbuzz()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// index.html\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">WL</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WasmLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token constant\">WL</span><span class=\"token punctuation\">.</span><span class=\"token function\">wasm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/build/optimized.wasm'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> fizzbuzz <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">;</span>\n\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token function\">fizzbuzz</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Running <code class=\"language-text\">fizzbuzz(3)</code> outputs a number and not a string. Remember that Web Assembly only deals in numbers so AssemblyScript allocates space for the strings (see: untouched.wat) and passes them into memory. The number being returned is a pointer to the memory address of the string being returned. Fortunately AssemblyScript includes a <a href=\"https://www.assemblyscript.org/loader.html#loader\">loader</a> that lets us allocate and read from memory.</p>\n<p>Let's import the loader into the page:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// index.html\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/@assemblyscript/loader/umd/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In <code class=\"language-text\">loader.js</code> file, replace the <code class=\"language-text\">WebAssembly</code> method calls with <code class=\"language-text\">loader</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// js/loader.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WasmLoader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">wasm</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> imports <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_imports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">fetching </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>loader<span class=\"token punctuation\">.</span>instantiateStreaming<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wasmFallback</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> imports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> instance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> imports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> instance<span class=\"token operator\">?.</span>exports<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">wasmFallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> imports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'using fallback'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token operator\">?.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> instance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> imports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> instance<span class=\"token operator\">?.</span>exports<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The AssemblyScript loader will require internal glue code to be sent with our wasm. Adding the <code class=\"language-text\">--exportRuntime</code> flag will compile our wasm with these helper functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// package.json</span>\n<span class=\"token string\">\"asbuild:untouched\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"asc assembly/index.ts --target debug --exportRuntime\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"asbuild:optimized\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"asc assembly/index.ts --target release --exportRuntime\"</span></code></pre></div>","frontmatter":{"path":"/assembly-script/loader","title":"AssemblyScript Loader","order":"3H","section":"AssemblyScript","description":""}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"5A","path":"/closing","title":"In closing"}}},{"node":{"frontmatter":{"order":"0B","path":"/intro-to-wasm","title":"Introduction to Web Assembly"}}},{"node":{"frontmatter":{"order":"0A","path":"/intro","title":"Hello"}}},{"node":{"frontmatter":{"order":"3A","path":"/assembly-script","title":"What is AssemblyScript"}}},{"node":{"frontmatter":{"order":"3G","path":"/assembly-script/imports","title":"Imports"}}},{"node":{"frontmatter":{"order":"3K","path":"/assembly-script/jsvwasm","title":"JS vs Wasm"}}},{"node":{"frontmatter":{"order":"3H","path":"/assembly-script/loader","title":"AssemblyScript Loader"}}},{"node":{"frontmatter":{"order":"3F","path":"/assembly-script/loading-browser","title":"Loading AssemblyScript - Browser"}}},{"node":{"frontmatter":{"order":"3E","path":"/assembly-script/loading-node","title":"Loading AssemblyScript - NodeJS"}}},{"node":{"frontmatter":{"order":"3J","path":"/assembly-script/memory","title":"Memory"}}},{"node":{"frontmatter":{"order":"3C","path":"/assembly-script/setup","title":"AssemblyScript Setup"}}},{"node":{"frontmatter":{"order":"3I","path":"/assembly-script/loader-usage","title":"Using the AssemblyScript loader"}}},{"node":{"frontmatter":{"order":"1C","path":"/low-level/binary-contd","title":"Binary continued"}}},{"node":{"frontmatter":{"order":"3D","path":"/assembly-script/writing","title":"Writing AssemblyScript"}}},{"node":{"frontmatter":{"order":"1B","path":"/low-level/binary","title":"Binary"}}},{"node":{"frontmatter":{"order":"1D","path":"/low-level/hex","title":"Hexadecimal"}}},{"node":{"frontmatter":{"order":"1G","path":"/low-level/memory","title":"Memory"}}},{"node":{"frontmatter":{"order":"1E","path":"/low-level/tostring","title":"The underrated .toString() method"}}},{"node":{"frontmatter":{"order":"1G","path":"/low-level/types","title":"Numeric types"}}},{"node":{"frontmatter":{"order":"2C","path":"/wasm/stack","title":"Stack and OpCode"}}},{"node":{"frontmatter":{"order":"2B","path":"/wasm/intro-contd","title":"Modules"}}},{"node":{"frontmatter":{"order":"2A","path":"/wasm/intro","title":"What is Web Assembly?"}}},{"node":{"frontmatter":{"order":"2D","path":"/wasm/writing","title":"Writing Web Assembly"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}