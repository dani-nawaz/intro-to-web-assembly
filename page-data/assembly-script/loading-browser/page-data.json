{"componentChunkName":"component---src-templates-lesson-template-js","path":"/assembly-script/loading-browser","result":{"data":{"markdownRemark":{"html":"<h6 id=\"working-repo\" style=\"position:relative;\"><a href=\"#working-repo\" aria-label=\"working repo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/young/intro-to-web-assembly/tree/main/lessons/assembly-script/exercises/2/iwasm\">Working repo</a></h6>\n<p>Now we get to the good stuff: using our Web Assembly in the browser just as nature intended.</p>\n<p>All modern browsers have the <code class=\"language-text\">WebAssembly</code> global object that acts the primary API into Web Assembly. <code class=\"language-text\">WebAssembly</code> has five static methods:</p>\n<ul>\n<li><code class=\"language-text\">WebAssembly.compile()</code> - Compile wasm</li>\n<li><code class=\"language-text\">WebAssembly.compileStreaming()</code> - Compile wasm from a streamed source</li>\n<li><code class=\"language-text\">WebAssembly.instantiate()</code> - Compile and instantiate wasm</li>\n<li><code class=\"language-text\">WebAssembly.instantiateStreaming()</code> - Compile and instantiate wasm from a streamed source</li>\n<li><code class=\"language-text\">WebAssembly.validate()</code> - Checks if wasm code is valid</li>\n</ul>\n<h4 id=\"fetching-wasm\" style=\"position:relative;\"><a href=\"#fetching-wasm\" aria-label=\"fetching wasm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetching wasm</h4>\n<p>We're fetching wasm from our server so let's use <code class=\"language-text\">instantiate()</code> and <code class=\"language-text\">instantiateStreaming()</code> to make a utility class for fetching and compiling our wasm.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// js/loader.js</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WasmLoader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">wasm</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">wasmFallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our <code class=\"language-text\">wasm()</code> method takes a path to the wasm file and will return the exported wasm functions. The <code class=\"language-text\">wasmFallback()</code> method is for browsers that don't support <code class=\"language-text\">instantiateStreaming()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// js/loader.js</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WasmLoader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">wasm</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">fetching </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>WebAssembly<span class=\"token punctuation\">.</span>instantiateStreaming<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wasmFallback</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> instance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> instance<span class=\"token operator\">?.</span>exports<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">wasmFallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">wasmFallback()</code> works the same as <code class=\"language-text\">wasm()</code> with the exeception that we need to create an intermediate array buffer before instantiating our module.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// js/loader.js</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WasmLoader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">wasm</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">fetching </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>WebAssembly<span class=\"token punctuation\">.</span>instantiateStreaming<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wasmFallback</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> instance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> instance<span class=\"token operator\">?.</span>exports<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">wasmFallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'using fallback'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token operator\">?.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> instance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> instance<span class=\"token operator\">?.</span>exports<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"creating-a-server\" style=\"position:relative;\"><a href=\"#creating-a-server\" aria-label=\"creating a server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a server</h4>\n<p><code class=\"language-text\">instantiateStreaming()</code> requires the wasm being fetched to have an <code class=\"language-text\">Content-Type: application/wasm</code> response header. Fortunately, <a href=\"https://expressjs.com/\">Express</a> will automatically add this header when serving requests for wasm files.</p>\n<p>Install Express</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i express --save</code></pre></div>\n<p>Create a simple server</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// server.js</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Serve static files from root (note: do not this in production code)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Server up on port 3000!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Add a run script to start the server</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// package.json</span>\n<span class=\"token string\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node server.js\"</span></code></pre></div>\n<h4 id=\"loading-in-the-browser\" style=\"position:relative;\"><a href=\"#loading-in-the-browser\" aria-label=\"loading in the browser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Loading in the browser</h4>\n<p>Let's import our <code class=\"language-text\">WasmLoader</code> and use it to access our <code class=\"language-text\">minusone()</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- index.html --></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>/js/loader.js</span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">const</span> <span class=\"token constant\">WL</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WasmLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token constant\">WL</span><span class=\"token punctuation\">.</span><span class=\"token function\">wasm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/build/optimized.wasm'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> minusOne <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">;</span>\n\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token function\">minusOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Navigate to <code class=\"language-text\">localhost:3000</code> and you will see <em>43</em> on the page. Congratulations! We've written Web Assembly, loaded and compiled the module, and executed a wasm function 🎉. Now that we understand how to <em>export</em> and run wasm functions in JavaScript, let's learn how to <em>import</em> JS functions into Web Assembly.</p>","frontmatter":{"path":"/assembly-script/loading-browser","title":"Loading AssemblyScript - Browser","order":"3F","section":"AssemblyScript","description":""}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"5A","path":"/closing","title":"In closing"}}},{"node":{"frontmatter":{"order":"0B","path":"/intro-to-wasm","title":"Introduction to Web Assembly"}}},{"node":{"frontmatter":{"order":"0A","path":"/intro","title":"Hello"}}},{"node":{"frontmatter":{"order":"3A","path":"/assembly-script","title":"What is AssemblyScript"}}},{"node":{"frontmatter":{"order":"3G","path":"/assembly-script/imports","title":"Imports"}}},{"node":{"frontmatter":{"order":"3K","path":"/assembly-script/jsvwasm","title":"JS vs Wasm"}}},{"node":{"frontmatter":{"order":"3H","path":"/assembly-script/loader","title":"AssemblyScript Loader"}}},{"node":{"frontmatter":{"order":"3F","path":"/assembly-script/loading-browser","title":"Loading AssemblyScript - Browser"}}},{"node":{"frontmatter":{"order":"3E","path":"/assembly-script/loading-node","title":"Loading AssemblyScript - NodeJS"}}},{"node":{"frontmatter":{"order":"3J","path":"/assembly-script/memory","title":"Memory"}}},{"node":{"frontmatter":{"order":"3C","path":"/assembly-script/setup","title":"AssemblyScript Setup"}}},{"node":{"frontmatter":{"order":"3I","path":"/assembly-script/loader-usage","title":"Using the AssemblyScript loader"}}},{"node":{"frontmatter":{"order":"1C","path":"/low-level/binary-contd","title":"Binary continued"}}},{"node":{"frontmatter":{"order":"3D","path":"/assembly-script/writing","title":"Writing AssemblyScript"}}},{"node":{"frontmatter":{"order":"1B","path":"/low-level/binary","title":"Binary"}}},{"node":{"frontmatter":{"order":"1D","path":"/low-level/hex","title":"Hexadecimal"}}},{"node":{"frontmatter":{"order":"1G","path":"/low-level/memory","title":"Memory"}}},{"node":{"frontmatter":{"order":"1E","path":"/low-level/tostring","title":"The underrated .toString() method"}}},{"node":{"frontmatter":{"order":"1G","path":"/low-level/types","title":"Numeric types"}}},{"node":{"frontmatter":{"order":"2C","path":"/wasm/stack","title":"Stack and OpCode"}}},{"node":{"frontmatter":{"order":"2B","path":"/wasm/intro-contd","title":"Modules"}}},{"node":{"frontmatter":{"order":"2A","path":"/wasm/intro","title":"What is Web Assembly?"}}},{"node":{"frontmatter":{"order":"2D","path":"/wasm/writing","title":"Writing Web Assembly"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}