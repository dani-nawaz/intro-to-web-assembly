{"componentChunkName":"component---src-templates-lesson-template-js","path":"/assembly-script/imports","result":{"data":{"markdownRemark":{"html":"<h6 id=\"working-repo\" style=\"position:relative;\"><a href=\"#working-repo\" aria-label=\"working repo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/young/intro-to-web-assembly/tree/main/lessons/assembly-script/exercises/3/iwasm\">Working repo</a></h6>\n<p>Just as we can export wasm functions, we can import JS functions into our code. One useful import is the <code class=\"language-text\">abort()</code> function which we call if we want terminate execution of wasm a function.</p>\n<p>Call <code class=\"language-text\">abort()</code> if the function input is 44.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// assembly/index.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">minusOne</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token operator\">:</span> i32</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> i32 <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Compile our wasm</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run asbuild</code></pre></div>\n<p>Loading the browser we see an error:\n<code class=\"language-text\">Imports argument must be present and must be an object</code></p>\n<p>This is because <code class=\"language-text\">abort()</code> isn't currently defined in the context of our wasm yet. The import object is defined in the second argument of <code class=\"language-text\">instantiateStreaming()</code> and <code class=\"language-text\">instantiate()</code>.</p>\n<p>Create an import object with an <code class=\"language-text\">abort()</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// js/loader.js</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_imports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Abort called from wasm file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Add the import object to both methods</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// js/loader.js</span>\n   <span class=\"token keyword\">async</span> <span class=\"token function\">wasm</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> imports <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_imports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">fetching </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>WebAssembly<span class=\"token punctuation\">.</span>instantiateStreaming<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wasmFallback</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> imports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> instance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> imports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> instance<span class=\"token operator\">?.</span>exports<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">wasmFallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> imports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'using fallback'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token operator\">?.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> instance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> imports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> instance<span class=\"token operator\">?.</span>exports<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Loading the page now throws an exception. Remove the <code class=\"language-text\">abort()</code> call for now and rebuild the wasm code.</p>\n<h4 id=\"defining-imports\" style=\"position:relative;\"><a href=\"#defining-imports\" aria-label=\"defining imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining imports</h4>\n<h6 id=\"working-repo-1\" style=\"position:relative;\"><a href=\"#working-repo-1\" aria-label=\"working repo 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/young/intro-to-web-assembly/tree/main/lessons/assembly-script/exercises/3/iwasm\">Working repo</a></h6>\n<p>AssemblyScript has several <a href=\"https://www.assemblyscript.org/exports-and-imports.html#imports-2\">imports built into its loader</a> (which we'll cover a bit later) so we didn't have to manually declare <code class=\"language-text\">abort()</code>. For other JavaScript functions imported into AssemblyScript we need to define them before they can be imported.</p>\n<p>To define a custom import in AssemblyScript we declare it's function signature. Here we're defining a log function that will allow us to call <code class=\"language-text\">console.log()</code> from Web Assembly code.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// assembly/index.ts</span>\ndeclare <span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token operator\">:</span> i32</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">minusOne</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token operator\">:</span> i32</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> i32 <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Add the function to the import object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// js/loader.js</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_imports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Abort called from wasm file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            index<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"path":"/assembly-script/imports","title":"Imports","order":"3G","section":"AssemblyScript","description":""}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"5A","path":"/closing","title":"In closing"}}},{"node":{"frontmatter":{"order":"0A","path":"/intro","title":"Hello"}}},{"node":{"frontmatter":{"order":"3A","path":"/assembly-script","title":"What is AssemblyScript"}}},{"node":{"frontmatter":{"order":"0B","path":"/intro-to-wasm","title":"Introduction to Web Assembly"}}},{"node":{"frontmatter":{"order":"3G","path":"/assembly-script/imports","title":"Imports"}}},{"node":{"frontmatter":{"order":"3K","path":"/assembly-script/jsvwasm","title":"JS vs Wasm"}}},{"node":{"frontmatter":{"order":"3H","path":"/assembly-script/loader","title":"AssemblyScript Loader"}}},{"node":{"frontmatter":{"order":"3F","path":"/assembly-script/loading-browser","title":"Loading AssemblyScript - Browser"}}},{"node":{"frontmatter":{"order":"3E","path":"/assembly-script/loading-node","title":"Loading AssemblyScript - NodeJS"}}},{"node":{"frontmatter":{"order":"3J","path":"/assembly-script/memory","title":"Memory"}}},{"node":{"frontmatter":{"order":"3C","path":"/assembly-script/setup","title":"AssemblyScript Setup"}}},{"node":{"frontmatter":{"order":"3I","path":"/assembly-script/loader-usage","title":"Using the AssemblyScript loader"}}},{"node":{"frontmatter":{"order":"3D","path":"/assembly-script/writing","title":"Writing AssemblyScript"}}},{"node":{"frontmatter":{"order":"1C","path":"/low-level/binary-contd","title":"Binary continued"}}},{"node":{"frontmatter":{"order":"1B","path":"/low-level/binary","title":"Binary"}}},{"node":{"frontmatter":{"order":"1D","path":"/low-level/hex","title":"Hexadecimal"}}},{"node":{"frontmatter":{"order":"1G","path":"/low-level/memory","title":"Memory"}}},{"node":{"frontmatter":{"order":"1E","path":"/low-level/tostring","title":"The underrated .toString() method"}}},{"node":{"frontmatter":{"order":"1G","path":"/low-level/types","title":"Numeric types"}}},{"node":{"frontmatter":{"order":"2C","path":"/wasm/stack","title":"Stack and OpCode"}}},{"node":{"frontmatter":{"order":"2B","path":"/wasm/intro-contd","title":"Modules"}}},{"node":{"frontmatter":{"order":"2A","path":"/wasm/intro","title":"What is Web Assembly?"}}},{"node":{"frontmatter":{"order":"2D","path":"/wasm/writing","title":"Writing Web Assembly"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}